#include<iostream>
#include<string>
#include<vector>
#include"Rational.h"
#include"Stack.h"
#include"reverse_polish_notation.h"
using namespace std;

int main() {
	string OPZ;
	Stack<Rational> st;
	Rational temp1, temp2, result;
	char operation;
	// (a+b)*(c-d)/(e^f)
	//a b +c d -*e f ^/
	// (5|6+7|10)*(17|23-2|23)/(4|7^3|1)

	string expression;
	cin >> expression;
	vector<char> operators{ '-','+','/','*','^' };
	vector<int> priorities{ 0,0,1,1,2 };
	OPZ = reverse_polish_notation(expression, operators, priorities);
	cout << "Reverse Polish Notation: " << OPZ << endl;

	while (OPZ.size() != 0) {
		if (OPZ[0] != '+' and OPZ[0] != '-' and OPZ[0] != '*' and OPZ[0] != '/' and OPZ[0] != '^') {
			st.push(temp1.extract(OPZ));
			cout << st.look_top() << endl;
		}
		else {
			switch (OPZ[0])
			{
			case '!':
				// унарный минус
				break;
			case '+':
				temp2 = st.look_top();
				st.pop();
				temp1 = st.look_top();
				st.pop();
				result = temp1 + temp2;
				st.push(result);
				break;
			case '-':
				temp2 = st.look_top();
				st.pop();
				temp1 = st.look_top();
				st.pop();
				result = temp1 - temp2;
				st.push(result);
				break;
			case '*':
				temp2 = st.look_top();
				st.pop();
				temp1 = st.look_top();
				st.pop();
				result = temp1 * temp2;
				st.push(result);
				break;
			case '/':
				temp2 = st.look_top();
				st.pop();
				temp1 = st.look_top();
				st.pop();
				result = temp1 / temp2;
				st.push(result);
				break;
			case '^':
				temp2 = st.look_top();
				st.pop();
				temp1 = st.look_top();
				st.pop();
				result = (temp1 ^ temp2);
				st.push(result);
				break;
			}
			OPZ.erase(OPZ.begin(), OPZ.begin() + 1);
		}
	}

	cout << "result = " << st.look_top() << endl;
	system("pause");
	return 0;
}
